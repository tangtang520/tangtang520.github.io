<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>猿猿的博客</title>
  
  <subtitle>你可以迷茫，但不可以虚度</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.hetao.monster/"/>
  <updated>2020-08-26T11:35:11.386Z</updated>
  <id>http://blog.hetao.monster/</id>
  
  <author>
    <name>tang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>个性化推荐系统理论+实战</title>
    <link href="http://blog.hetao.monster/2020/05/25/recommend-system/"/>
    <id>http://blog.hetao.monster/2020/05/25/recommend-system/</id>
    <published>2020-05-25T12:01:18.000Z</published>
    <updated>2020-08-26T11:35:11.386Z</updated>
    
    <content type="html"><![CDATA[<p>通过 <strong>Spark SQL, Spark MLlib, Spark Streaming</strong>技术，基于 **隐语义模型(LFM)**，结合实际项目经验，搭建一套个性化推荐系统</p><a id="more"></a><h4 id="这边文章更多的是分享一下，在实际项目中，如何落地个性化推荐，因为晚上相关资料很杂，并且一些开发流程都涉及的很片面，并且有绝大部分教程都是以电影推荐为例子来讲解，不可否认，电影推荐来讲解确实方便，因为有现成的数据源加上本身就自带的评分体系，但是实际工作中，有很多没有直接评分的，所以我们从这些流程动手，带你一起过一下，真实项目中的开发流程"><a href="#这边文章更多的是分享一下，在实际项目中，如何落地个性化推荐，因为晚上相关资料很杂，并且一些开发流程都涉及的很片面，并且有绝大部分教程都是以电影推荐为例子来讲解，不可否认，电影推荐来讲解确实方便，因为有现成的数据源加上本身就自带的评分体系，但是实际工作中，有很多没有直接评分的，所以我们从这些流程动手，带你一起过一下，真实项目中的开发流程" class="headerlink" title="这边文章更多的是分享一下，在实际项目中，如何落地个性化推荐，因为晚上相关资料很杂，并且一些开发流程都涉及的很片面，并且有绝大部分教程都是以电影推荐为例子来讲解，不可否认，电影推荐来讲解确实方便，因为有现成的数据源加上本身就自带的评分体系，但是实际工作中，有很多没有直接评分的，所以我们从这些流程动手，带你一起过一下，真实项目中的开发流程"></a>这边文章更多的是分享一下，在实际项目中，如何落地个性化推荐，因为晚上相关资料很杂，并且一些开发流程都涉及的很片面，并且有绝大部分教程都是以电影推荐为例子来讲解，不可否认，电影推荐来讲解确实方便，因为有现成的数据源加上本身就自带的评分体系，但是实际工作中，有很多没有直接评分的，所以我们从这些流程动手，带你一起过一下，真实项目中的开发流程</h4><h2 id="类似抖音，头条的点赞、分享、收藏等量化用户评分"><a href="#类似抖音，头条的点赞、分享、收藏等量化用户评分" class="headerlink" title="类似抖音，头条的点赞、分享、收藏等量化用户评分"></a>类似抖音，头条的点赞、分享、收藏等量化用户评分</h2><h3 id="1-首先业务定义评分"><a href="#1-首先业务定义评分" class="headerlink" title="1. 首先业务定义评分"></a>1. 首先业务定义评分</h3><p>比如点了赞，给1分，分享了，给2分，收藏了，给三分</p><h3 id="2-定义各个部分所占的权重"><a href="#2-定义各个部分所占的权重" class="headerlink" title="2. 定义各个部分所占的权重"></a>2. 定义各个部分所占的权重</h3><p>不同的行为，反映了用户的不同喜好程度，比如分享了比点赞更重要。面对众多指标，如何合理地确定各权重呢？这里通过层次分析法来确定各行为指标的权重</p><p><strong>构造成对比较矩阵</strong></p><table><thead><tr><th></th><th>播放时长</th><th>播放时长/视频时长</th><th>评论</th><th>下载</th><th>收藏</th><th>分享</th></tr></thead><tbody><tr><td>播放时长</td><td>1</td><td>1/3</td><td>1</td><td>1/3</td><td>1/5</td><td>1/5</td></tr><tr><td>播放时长/视频时长</td><td>3</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1/2</td></tr><tr><td>评论</td><td>1</td><td>1</td><td>1</td><td>1/3</td><td>1/2</td><td>1/5</td></tr><tr><td>下载</td><td>3</td><td>1</td><td>3</td><td>1</td><td>1</td><td>1/2</td></tr><tr><td>收藏</td><td>5</td><td>1</td><td>2</td><td>1</td><td>1</td><td>1/2</td></tr><tr><td>分享</td><td>5</td><td>2</td><td>5</td><td>2</td><td>2</td><td>1</td></tr></tbody></table><p>比如第四行第一列的数字3，表示“下载”比“播放时长”稍重要。</p><table><thead><tr><th>标度</th><th>含义</th></tr></thead><tbody><tr><td>1</td><td>表示两个元素相比，具有同样重要性</td></tr><tr><td>3</td><td>表示两个元素相比，前者比后者稍重要</td></tr><tr><td>5</td><td>表示两个元素相比，前者比后者明显重要</td></tr><tr><td>7</td><td>表示两个元素相比，前者比后者强烈重要</td></tr><tr><td>9</td><td>表示两个元素相比，前者比后者极端重要</td></tr><tr><td>2，4，6，8</td><td>表示上述相邻判断的中间值</td></tr><tr><td>倒数</td><td>上边的行为反过来</td></tr></tbody></table><h3 id="3-权重归一化"><a href="#3-权重归一化" class="headerlink" title="3. 权重归一化"></a>3. 权重归一化</h3><ul><li>把权重矩阵的每一行都归一化处理</li><li>每一行的数值相加 去掉一维</li><li>剩下的所有数据在进行归一化</li></ul><p><strong>例子</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">原矩阵</span><br><span class="line">[[1, 1/3, 1, 1/3, 1/5, 1/5],</span><br><span class="line">[3, 1, 1, 1, 1, 1/2]]</span><br><span class="line"></span><br><span class="line">1. 进行每行的归一化</span><br><span class="line">[[ 0.05555556 0.0521327 0.07692308 0.05830389 0.03508772 0.06896552]</span><br><span class="line">[0.16666667 0.15797788 0.07692308 0.17667845 0.1754386 0.17241379]</span><br><span class="line"></span><br><span class="line">2.每行相加</span><br><span class="line">[ 0.34696846 0.92609846]</span><br><span class="line"></span><br><span class="line">3.在进行归一化</span><br><span class="line">[ 0.05782808 0.15434974]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-评分归一化"><a href="#4-评分归一化" class="headerlink" title="4. 评分归一化"></a>4. 评分归一化</h3><table><thead><tr><th>播放时长</th><th>播放时长/视频时长</th><th>评论</th><th>下载</th><th>收藏</th><th>分享</th></tr></thead><tbody><tr><td>0.9</td><td>0.8</td><td>1</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><h3 id="5-根据评分和权重-计算物品的得分"><a href="#5-根据评分和权重-计算物品的得分" class="headerlink" title="5. 根据评分和权重 计算物品的得分"></a>5. 根据评分和权重 计算物品的得分</h3><pre><code>score = w1 * x1 + w2 * x2.......</code></pre><h2 id="推荐系统组成部分-（源码）"><a href="#推荐系统组成部分-（源码）" class="headerlink" title="推荐系统组成部分 （源码）"></a>推荐系统组成部分 （<a href="https://github.com/tangtang520/recommend-system">源码</a>）</h2><h3 id="1-离线数据加载和清洗"><a href="#1-离线数据加载和清洗" class="headerlink" title="1.离线数据加载和清洗"></a>1.离线数据加载和清洗</h3><p>从业务的数据源选取对应的操作数据，数据源可以是日志文件、或者Hadoop、MySQL、MongoDB等选取，选取的内容无外乎点赞、分享、收藏、观看记录等，通过Spark进行数据的整理和清洗，保存清洗后的数据。</p><h3 id="2-推荐策略-统计推荐"><a href="#2-推荐策略-统计推荐" class="headerlink" title="2.推荐策略-统计推荐"></a>2.推荐策略-统计推荐</h3><p>其实在项目的冷启动阶段，一些简单的推荐策略不但能达到比较好的推荐策略，并且还能收集信息，为将来的使用更加”先进”的推荐算法做好数据收集</p><p><strong>统计推荐可以考虑的点</strong></p><ul><li><p><strong>按照点赞量</strong> </p><p>  但是这样的策略会间接带来一些问题，前期上的一些内容基本都会一直在前边展示，解决思路就是加入时间维度进行惩罚，说一个简单思路 <strong>总的点赞量/物品上线时间</strong></p></li><li><p><strong>历史热门&amp;近期热门</strong> </p><p>  统计最近一段时间内热门的数据，热门定义根据自身业务来，可以是点赞量、分享、收藏、观看次数、完播率、或者某几项的评分等</p></li><li><p><strong>根据物品的评分得分</strong></p><p>  统计电影历史的平均得分，推荐得分权重较高的</p></li><li><p><strong>根据类别推荐TOPN</strong></p><p>  如果业务中的物品有类别的概念，可以考虑统计不同类别的评分TOPN数据</p></li><li><p><strong>系统相关</strong></p><p>  这一块严格意义不太算统计推荐中的内容，可以先把它划为这里，就是根据自身业务特点，比如我想主推某几个物品</p></li><li><p><strong>长尾</strong></p><p>  这一块严格意义也不太算统计推荐中的内容，可以把一些长尾的数据给一定的推荐量，根据后续的统计情况来判定是否进行二次推荐</p></li></ul><h3 id="2-推荐策略-内容推荐"><a href="#2-推荐策略-内容推荐" class="headerlink" title="2.推荐策略-内容推荐"></a>2.推荐策略-内容推荐</h3><p>内容推荐无外乎是定义两个物品的相似度，找到与当前物品相似的N个物品进行推荐，那么如何定义物品之间的相似度呢？</p><p><strong>思路一：</strong></p><ul><li>业务中每个物品有N多属性，我们可以选取其中几个属性</li><li>把选取的属性数值为向量（例如: 性别抽象为0|1），然后进行归一化</li><li>根据余弦相似度或者其他相似度算法 计算两个物品的相似度</li></ul><p><strong>思路二：</strong></p><ul><li>假如一些特征是包含一些文字信息，可以考虑使用<strong>tf-idf</strong>进行词频统计，计算相似度</li></ul><h3 id="3-推荐策略-基于隐语义-LFM-进行离线计算"><a href="#3-推荐策略-基于隐语义-LFM-进行离线计算" class="headerlink" title="3.推荐策略-基于隐语义(LFM)进行离线计算"></a>3.推荐策略-基于隐语义(LFM)进行离线计算</h3><p>这一块主要是使用<strong>Spark MLlib</strong> 来进行矩阵分解，说一下大体流程</p><ul><li>构建 <strong>用户-商品-评分</strong> 的矩阵</li><li>随机拆分 训练数据和测试数据</li><li>训练ALS包的涉及的不同参数，根据RMSE(均方根误差)选取较优的参数</li><li>根据训练出来的参数，拟合参数为用户-物品笛卡尔积的结果，预测所有的评分存储</li><li>在ALS拟合过程中会产生物品的特性向量，通过特征向量，得到物品的相似集合数据</li></ul><h3 id="3-推荐策略-实时推荐"><a href="#3-推荐策略-实时推荐" class="headerlink" title="3.推荐策略-实时推荐"></a>3.推荐策略-实时推荐</h3><p>这一块主要是基于<strong>Spark Streaming</strong> &amp; <strong>Kafka</strong>来进行数据流的计算，大致流程如下</p><ul><li><p>过来一个物品，选择一个候选物品集合，候选物品可以根据前几步计算的物品相似集合获取</p></li><li><p>过滤掉用户已经观看的数据</p></li><li><p>从业务系统中获取用户最近一段时间物品评分情况</p></li><li><p>分别计算候选物品与最近一段时间物品的关联情况进行选择，可以草考如下计算规则</p><pre><code>  规定：      评分超过3分为激励项，低于3分为惩罚项  设：      候选物品与当前物品的相似度s      各个最近物品的评分为c1,c2,c3      总的最近评分物品数量为n  计算公式：      (s * c1 + s * c2 + s * c3) / n  + log(激励项) - log(惩罚项)</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过 &lt;strong&gt;Spark SQL, Spark MLlib, Spark Streaming&lt;/strong&gt;技术，基于 **隐语义模型(LFM)**，结合实际项目经验，搭建一套个性化推荐系统&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="技术" scheme="http://blog.hetao.monster/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>springboot-plus</title>
    <link href="http://blog.hetao.monster/2020/03/25/springboot-plus/"/>
    <id>http://blog.hetao.monster/2020/03/25/springboot-plus/</id>
    <published>2020-03-24T19:33:17.000Z</published>
    <updated>2020-08-27T04:13:53.123Z</updated>
    
    <content type="html"><![CDATA[<p align="center">  <a href="https://github.com/geekidea/spring-boot-plus">   <img alt="spring-boot-plus logo" src="https://springboot.plus/img/logo.png">  </a></p><p align="center">  Everyone can develop projects independently, quickly and efficiently！</p><p align="center">    <a href="https://github.com/geekidea/spring-boot-plus/">    <img alt="spring-boot-plus version" src="https://img.shields.io/badge/spring--boot--plus-2.0-blue">  </a>  <a href="https://github.com/spring-projects/spring-boot">    <img alt="spring boot version" src="https://img.shields.io/badge/spring%20boot-2.2.5.RELEASE-brightgreen">  </a>  <a href="https://www.apache.org/licenses/LICENSE-2.0">    <img alt="code style" src="https://img.shields.io/badge/license-Apache%202-4EB1BA.svg?style=flat-square">  </a></p><p><strong>springboot-plus是一套集成spring boot常用开发组件的后台快速开发框架</strong></p><a id="more"></a><blockquote><p>springboot-plus 是易于使用，快速，高效，功能丰富，开源的spring boot 脚手架</p></blockquote><h3 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h3><ul><li>全局上下文唯一流水号，以及日志中自动存储当前流水号，快速定位问题</li><li>集成spring boot 常用开发组件集、公共配置、AOP日志等</li><li>集成mybatis plus快速dao操作</li><li>快速生成后台代码: entity/controller/service/mapper/xml</li><li>集成Swagger/Knife4j，可自动生成api文档</li><li>集成jwt、签名机制，通过注解灵活鉴权</li><li>集成Redis缓存</li><li>集成druid连接池，JDBC性能和慢查询检测</li><li>全局错误处理</li></ul><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="克隆-springboot-plus"><a href="#克隆-springboot-plus" class="headerlink" title="克隆 springboot-plus"></a>克隆 springboot-plus</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/tangtang520/tangtang520-springboot-plus.git</span><br><span class="line"><span class="built_in">cd</span> springboot-plus</span><br></pre></td></tr></table></figure><h2 id="5分钟完成增删改查"><a href="#5分钟完成增删改查" class="headerlink" title="5分钟完成增删改查"></a>5分钟完成增删改查</h2><h3 id="1-创建数据库表"><a href="#1-创建数据库表" class="headerlink" title="1. 创建数据库表"></a>1. 创建数据库表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for foo_bar</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`foo_bar`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`foo_bar`</span></span><br><span class="line">(</span><br><span class="line">    <span class="string">`id`</span>            <span class="built_in">bigint</span>(<span class="number">20</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    <span class="string">`name`</span>          <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;名称&#x27;</span>,</span><br><span class="line">    <span class="string">`foo`</span>           <span class="built_in">varchar</span>(<span class="number">20</span>)          <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">    <span class="string">`bar`</span>           <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">    <span class="string">`remark`</span>        <span class="built_in">varchar</span>(<span class="number">200</span>)         <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line">    <span class="string">`state`</span>         <span class="built_in">int</span>(<span class="number">11</span>)     <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;状态，0：禁用，1：启用&#x27;</span>,</span><br><span class="line">    <span class="string">`version`</span>       <span class="built_in">int</span>(<span class="number">11</span>)     <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;版本&#x27;</span>,</span><br><span class="line">    <span class="string">`create_time`</span>   <span class="built_in">timestamp</span>   <span class="literal">NULL</span>     <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    <span class="string">`update_time`</span>   <span class="built_in">timestamp</span>   <span class="literal">NULL</span>     <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span></span><br><span class="line">  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8mb4</span><br><span class="line">  <span class="keyword">COLLATE</span> = utf8mb4_general_ci <span class="keyword">COMMENT</span> =<span class="string">&#x27;FooBar&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of foo_bar</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> foo_bar (<span class="keyword">id</span>, <span class="keyword">name</span>, foo, bar, remark, state, <span class="keyword">version</span>, create_time, update_time) </span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;FooBar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;remark...&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2019-11-01 14:05:14&#x27;</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> foo_bar (<span class="keyword">id</span>, <span class="keyword">name</span>, foo, bar, remark, state, <span class="keyword">version</span>, create_time, update_time) </span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;HelloWorld&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="literal">null</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2019-11-01 14:05:14&#x27;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-使用代码生成器生成增删改查代码"><a href="#2-使用代码生成器生成增删改查代码" class="headerlink" title="2.使用代码生成器生成增删改查代码"></a>2.使用代码生成器生成增删改查代码</h3><blockquote><p>代码生成入口类</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FrameworkCodeGenerator类执行main函数</span><br></pre></td></tr></table></figure><blockquote><p><strong>支持表的修改不影响已有的mapper文件</strong></p><p><strong>支持多表同时生成entity/controller/service/mapper/xml</strong></p><p><strong>支持常用的增删改查分页，支持极其丰富的条件构造器</strong></p><p><strong>真正的0配置，免去了 application.yml 或者数据源连接池配置的重复性工作</strong></p><p><strong>多数据源也做到了0配置</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码生成器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrameworkCodeGenerator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*是否仅仅生成entity*/</span></span><br><span class="line">        <span class="keyword">boolean</span> onlyEntity = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*是否是默认库*/</span></span><br><span class="line">        <span class="keyword">boolean</span> isPrimary = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*是否生成controller代码*/</span></span><br><span class="line">        <span class="keyword">boolean</span> isGenerateController = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*链接的数据库*/</span></span><br><span class="line">        SystemConfigConst.DatasourceEnum datasourceEnum = SystemConfigConst.DatasourceEnum.READING;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*生成的表结构*/</span></span><br><span class="line">        String[] tables = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;tb_test&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*代码生成*/</span></span><br><span class="line">        generateByTables(onlyEntity, isPrimary, datasourceEnum, isGenerateController, tables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generateByTables</span><span class="params">(<span class="keyword">boolean</span> onlyEntity, <span class="keyword">boolean</span> isPrimary, SystemConfigConst.DatasourceEnum databaseConst, <span class="keyword">boolean</span> isGenerateController, String... tableNames)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        checkContinue(onlyEntity);</span><br><span class="line">        <span class="comment">//user -&gt; UserService, 设置成true: user -&gt; IUserService</span></span><br><span class="line">        <span class="keyword">boolean</span> isServiceI = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        String packageName = SystemConfigConst.BASE_PACKAGE;</span><br><span class="line"></span><br><span class="line">        GlobalConfig config = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String dbUrl = databaseConst.getJdbcUrl();</span><br><span class="line">        DataSourceConfig dataSourceConfig = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dataSourceConfig.setDbType(DbType.MYSQL)</span><br><span class="line">                .setUrl(dbUrl)</span><br><span class="line">                .setUsername(databaseConst.getUserName())</span><br><span class="line">                .setPassword(databaseConst.getPassword())</span><br><span class="line">                .setDriverName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        StrategyConfig strategyConfig = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategyConfig</span><br><span class="line">                .setTablePrefix(databaseConst.getTablePrefix())</span><br><span class="line">                .setEntityColumnConstant(<span class="keyword">true</span>)</span><br><span class="line">                .setCapitalMode(<span class="keyword">true</span>)</span><br><span class="line">                .setEntityLombokModel(<span class="keyword">false</span>)</span><br><span class="line">                .setNaming(NamingStrategy.underline_to_camel)</span><br><span class="line">                .setRestControllerStyle(<span class="keyword">true</span>)</span><br><span class="line">                .setControllerMappingHyphenStyle(<span class="keyword">true</span>)</span><br><span class="line">                .setInclude(tableNames);<span class="comment">//修改替换成你需要的表名，多个表名传数组</span></span><br><span class="line">        strategyConfig.setSuperControllerClass(BaseController.class);</span><br><span class="line">        config.setActiveRecord(<span class="keyword">false</span>)</span><br><span class="line">                .setEnableCache(<span class="keyword">false</span>)</span><br><span class="line"><span class="comment">//                .setSwagger2(true)  //设置swagger</span></span><br><span class="line">                .setEntityName(<span class="string">&quot;%sEntity&quot;</span>)</span><br><span class="line">                .setAuthor(<span class="string">&quot;tfy&quot;</span>)</span><br><span class="line">                .setOutputDir(<span class="string">&quot;src/main/java&quot;</span>)</span><br><span class="line">                .setActiveRecord(<span class="keyword">true</span>)</span><br><span class="line">                .setFileOverride(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (!isServiceI) &#123;</span><br><span class="line">            config.setServiceName(<span class="string">&quot;%sService&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        PackageConfig packageConfig = <span class="keyword">new</span> PackageConfig()</span><br><span class="line">                .setParent(packageName)</span><br><span class="line">                .setEntity(<span class="string">&quot;entity.&quot;</span> + databaseConst.getDatabaseName())</span><br><span class="line">                .setService(<span class="string">&quot;service.&quot;</span> + databaseConst.getDatabaseName())</span><br><span class="line">                .setServiceImpl(<span class="string">&quot;service.&quot;</span> + databaseConst.getDatabaseName() + <span class="string">&quot;.impl&quot;</span>)</span><br><span class="line">                .setMapper(<span class="string">&quot;dao.&quot;</span> + databaseConst.getDatabaseName());</span><br><span class="line"><span class="comment">//              .setXml(&quot;dao.impl.&quot; + databaseConst.getDatabaseName());</span></span><br><span class="line"></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator().setGlobalConfig(config)</span><br><span class="line">                .setDataSource(dataSourceConfig)</span><br><span class="line">                .setStrategy(strategyConfig)</span><br><span class="line">                .setPackageInfo(packageConfig);</span><br><span class="line"></span><br><span class="line">        TemplateConfig tc = <span class="keyword">new</span> TemplateConfig();</span><br><span class="line">        tc.setEntity(<span class="string">&quot;/template/entity.java.vm&quot;</span>);</span><br><span class="line">        tc.setController(<span class="string">&quot;/template/controller.java.vm&quot;</span>);</span><br><span class="line"><span class="comment">//      tc.setController(null);</span></span><br><span class="line">        <span class="keyword">if</span>(!isGenerateController)&#123;</span><br><span class="line">            tc.setController(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        tc.setXml(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (onlyEntity) &#123;</span><br><span class="line">            tc.setController(<span class="keyword">null</span>);</span><br><span class="line">            tc.setMapper(<span class="keyword">null</span>);</span><br><span class="line">            tc.setXml(<span class="keyword">null</span>);</span><br><span class="line">            tc.setService(<span class="keyword">null</span>);</span><br><span class="line">            tc.setServiceImpl(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (!onlyEntity) &#123;</span><br><span class="line">            List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            focList.add(<span class="keyword">new</span> FileOutConfig(<span class="string">&quot;/templates/mapper.xml.vm&quot;</span>) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// 自定义输入文件名称</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;src/main/resources/mapper/&quot;</span> + databaseConst.getDatabaseName()</span><br><span class="line">                            + <span class="string">&quot;/&quot;</span> + tableInfo.getEntityName() + <span class="string">&quot;Mapper&quot;</span> + StringPool.DOT_XML;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            cfg.setFileOutConfigList(focList);</span><br><span class="line">        &#125;</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line">        mpg.setTemplate(tc);</span><br><span class="line">        mpg.execute();</span><br><span class="line">        <span class="keyword">if</span> (!onlyEntity) &#123;</span><br><span class="line">            saveDatabase(databaseConst, isPrimary);</span><br><span class="line">            saveApplicationProperties(databaseConst);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局上下文流水号"><a href="#全局上下文流水号" class="headerlink" title="全局上下文流水号"></a>全局上下文流水号</h2><h3 id="日志文件自动记录全局流水号"><a href="#日志文件自动记录全局流水号" class="headerlink" title="日志文件自动记录全局流水号"></a>日志文件自动记录全局流水号</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log.info(<span class="string">&quot;params . name:&#123;&#125;&quot;</span>, name);</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span> <span class="number">20</span>:<span class="number">28</span>:<span class="number">58.696</span> |  INFO | <span class="number">3523</span> |   XNIO-<span class="number">1</span> task-<span class="number">1</span> | c.i.u.controller.outer.TestController   :<span class="number">57</span>   | SERIAL_NUMBER=<span class="number">1298598310491193344</span> | params . name:汤丰源</span><br></pre></td></tr></table></figure><h3 id="返回内容自动返回全局流水号"><a href="#返回内容自动返回全局流水号" class="headerlink" title="返回内容自动返回全局流水号"></a>返回内容自动返回全局流水号</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;serialNumber&quot;</span>: <span class="string">&quot;1298598310491193344&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="错误日志全局处理自动记录接口地址，全局流水号，堆栈"><a href="#错误日志全局处理自动记录接口地址，全局流水号，堆栈" class="headerlink" title="错误日志全局处理自动记录接口地址，全局流水号，堆栈"></a>错误日志全局处理自动记录接口地址，全局流水号，堆栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span> <span class="number">20</span>:<span class="number">33</span>:<span class="number">38.985</span> | ERROR | <span class="number">3559</span> |   XNIO-<span class="number">1</span> task-<span class="number">1</span> | c.i.u.c.e.GlobalExceptionHandler        :<span class="number">49</span>   | SERIAL_NUMBER=<span class="number">1298599486083301376</span> | exceptionHandle.Exception url:/test/test, </span><br><span class="line"></span><br><span class="line">java.lang.ArithmeticException: / by zero</span><br><span class="line">    at com.iciba.user.controller.outer.TestController.test1(TestController.java:<span class="number">57</span>)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">    at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">    at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:<span class="number">190</span>)</span><br><span class="line">    at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:<span class="number">138</span>)</span><br><span class="line">    at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:<span class="number">106</span>)</span><br><span class="line">    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:<span class="number">888</span>)</span><br><span class="line">    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:<span class="number">793</span>)</span><br><span class="line">    at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:<span class="number">87</span>)</span><br><span class="line">    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:<span class="number">1040</span>)</span><br><span class="line">    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:<span class="number">943</span>)</span><br><span class="line">    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:<span class="number">1006</span>)</span><br><span class="line">    at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:<span class="number">898</span>)</span><br><span class="line">    at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">503</span>)</span><br><span class="line">    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:<span class="number">883</span>)</span><br><span class="line">    at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">590</span>)</span><br></pre></td></tr></table></figure><h2 id="redis-key统一配置和使用"><a href="#redis-key统一配置和使用" class="headerlink" title="redis key统一配置和使用"></a>redis key统一配置和使用</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><blockquote><p>RedisKeyConst类分模块配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ExampleEnum implements BaseEnum &#123;</span><br><span class="line">    <span class="comment">/* 格式: key -&gt; STR:USER:&#123;userId&#125;,  value -&gt; JSONString */</span></span><br><span class="line">    STR_USER_INFO(<span class="string">&quot;STR:USER:%s&quot;</span>, TimeUnit.SECONDS, <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">    <span class="keyword">private</span> String redisKeyFormat;</span><br><span class="line">    <span class="keyword">private</span> TimeUnit timeUnit;</span><br><span class="line">    <span class="keyword">private</span> Integer timeValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 获取指定的redis key相关信息，并且复制占位符*/</span></span><br><span class="line">KeyVo userInfoKeyVo = ExampleEnum.STR_USER_INFO.keyVo(userId);</span><br><span class="line"></span><br><span class="line">String userInfoRedisKey = userInfoKeyVo.getRedisKey();</span><br><span class="line"></span><br><span class="line">TimeUnit userInfoRedisKeyTimeUnit = userInfoKeyVo.getTimeUnit();</span><br><span class="line"></span><br><span class="line">Integer userInfoRedisKeyTimeValue = userInfoKeyVo.getTimeValue();</span><br></pre></td></tr></table></figure><h2 id="后续计划添加功能"><a href="#后续计划添加功能" class="headerlink" title="后续计划添加功能"></a>后续计划添加功能</h2><ul><li>后续会使用<a href="https://github.com/brettwooldridge/HikariCP">HikariCP</a>来替代druid</li><li>增加分库分表策略以及主从策略的代码生成器，推荐大家使用<a href="https://github.com/apache/shardingsphere">shardingsphere</a> </li><li>jwt验证，签名验证实现自定义注解配置</li><li>增加限流策略配置</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://github.com/geekidea/spring-boot-plus&quot;&gt;
   &lt;img alt=&quot;spring-boot-plus logo&quot; src=&quot;https://springboot.plus/img/logo.png&quot;&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  Everyone can develop projects independently, quickly and efficiently！
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;  
  &lt;a href=&quot;https://github.com/geekidea/spring-boot-plus/&quot;&gt;
    &lt;img alt=&quot;spring-boot-plus version&quot; src=&quot;https://img.shields.io/badge/spring--boot--plus-2.0-blue&quot;&gt;
  &lt;/a&gt;
  &lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;
    &lt;img alt=&quot;spring boot version&quot; src=&quot;https://img.shields.io/badge/spring%20boot-2.2.5.RELEASE-brightgreen&quot;&gt;
  &lt;/a&gt;
  &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;&gt;
    &lt;img alt=&quot;code style&quot; src=&quot;https://img.shields.io/badge/license-Apache%202-4EB1BA.svg?style=flat-square&quot;&gt;
  &lt;/a&gt;
&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;springboot-plus是一套集成spring boot常用开发组件的后台快速开发框架&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="技术" scheme="http://blog.hetao.monster/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>spell-correct(拼写纠错)</title>
    <link href="http://blog.hetao.monster/2020/03/13/spell-correct/"/>
    <id>http://blog.hetao.monster/2020/03/13/spell-correct/</id>
    <published>2020-03-12T16:44:17.000Z</published>
    <updated>2020-08-27T10:03:32.735Z</updated>
    
    <content type="html"><![CDATA[<p><strong>如何高效实现搜索中的拼写纠错功能?</strong></p><a id="more"></a><blockquote><p>在很多搜索相关的产品中，一般都会提供拼写纠错的功能，比如Google,百度 亦或是查词软件中，那么如何实现一个高性能的拼写纠错的系统呢？我们一起弄一下</p></blockquote><h2 id="如何量化两个字符串的相似度"><a href="#如何量化两个字符串的相似度" class="headerlink" title="如何量化两个字符串的相似度"></a>如何量化两个字符串的相似度</h2><blockquote><p>关于如何量化两个字符串的相似度的问题，我给出一种常用的方案<strong>编辑距离</strong></p><p>顾名思义，编辑距离指的就是，将一个字符串转化成另一个字符串，需要的最少编辑操作次数（比如增加一个字符、删除一个字符、替换一个字符）。编辑距离越大，说明两个字符串的相似程度越小；相反，编辑距离就越小，说明两个字符串的相似程度越大。对于两个完全相同的字符串来说，编辑距离就是 0。</p></blockquote><blockquote><p>根据所包含的编辑操作种类的不同，编辑距离有多种不同的计算方式，比较著名的有莱文斯坦距离（Levenshtein distance）和最长公共子串长度（Longest common substring length）。其中，莱文斯坦距离允许增加、删除、替换字符这三个编辑操作，最长公共子串长度只允许增加、删除字符这两个编辑操作。</p></blockquote><blockquote><p>而且，莱文斯坦距离和最长公共子串长度，从两个截然相反的角度，分析字符串的相似程度。莱文斯坦距离的大小，表示两个字符串差异的大小；而最长公共子串的大小，表示两个字符串相似程度的大小。</p></blockquote><h3 id="代码实现莱文斯坦距离"><a href="#代码实现莱文斯坦距离" class="headerlink" title="代码实现莱文斯坦距离"></a>代码实现莱文斯坦距离</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> word1: A string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> word2: A string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: The minimum number of steps.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(String word1, String word2)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">if</span>(word1 == <span class="keyword">null</span> || word2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span>[] s1 = word1.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] s2 = word2.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> m = s1.length;</span><br><span class="line">        <span class="keyword">int</span> n = s2.length;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义状态 双序列型动态规划</span></span><br><span class="line">        <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="comment">// i == 0 需要的编辑距离为 前j个元素</span></span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>) &#123;</span><br><span class="line">                    f[i][j] = j;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// j == 0的时候 需要的编辑距离为 前i个元素</span></span><br><span class="line">                <span class="keyword">if</span>(j == <span class="number">0</span>) &#123;</span><br><span class="line">                    f[i][j] = i;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// case1 考虑需要变动的三种情况 下边的式子分别为 删除、增加、替换的情况</span></span><br><span class="line">                f[i][j] = Math.min(f[i - <span class="number">1</span>][j], Math.min(f[i][j - <span class="number">1</span>], f[i - <span class="number">1</span>][j - <span class="number">1</span>])) + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// case2 最后一个字符相等的话 不需要编辑</span></span><br><span class="line">                <span class="keyword">if</span>(s1[i - <span class="number">1</span>] ==  s2[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    f[i][j] = Math.min(f[i][j], f[i - <span class="number">1</span>][j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码实现最长公共子串长度"><a href="#代码实现最长公共子串长度" class="headerlink" title="代码实现最长公共子串长度"></a>代码实现最长公共子串长度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> A: A string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> B: A string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: The length of longest common subsequence of A and B</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(String AA, String BB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(AA == <span class="keyword">null</span> || BB == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span>[] A = AA.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] B = BB.toCharArray();  </span><br><span class="line">        <span class="keyword">int</span> m = A.length;</span><br><span class="line">        <span class="keyword">int</span> n = B.length;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 动态规划 同样是双序列型动态规划的问题</span></span><br><span class="line">        <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="comment">// 只要一方没有元素，那么最长序列肯定是0</span></span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                    f[i][j] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// case1 分别看一下抛去当前字符的最长子串 </span></span><br><span class="line">                f[i][j] = Math.max(f[i - <span class="number">1</span>][j], f[i][j - <span class="number">1</span>]);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 最后字符相等话 就各自减去一个字符 + 当前的公共长度1</span></span><br><span class="line">                <span class="keyword">if</span>(A[i - <span class="number">1</span>] == B[j - <span class="number">1</span>])&#123;</span><br><span class="line">                    f[i][j] = Math.max(f[i][j], f[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工程中如何实践"><a href="#工程中如何实践" class="headerlink" title="工程中如何实践"></a>工程中如何实践</h2><blockquote><p>我们循序渐进的来，其实并不是说越复杂的实现就越好，实现一个功能一定要根据自身的业务以及量来选择对应的实现，这个思想其实也体现在设计原则中，既不能设计不足，也不能过渡设计</p></blockquote><h3 id="实现一：-简单实现思路"><a href="#实现一：-简单实现思路" class="headerlink" title="实现一： 简单实现思路"></a>实现一： 简单实现思路</h3><blockquote><p>当用户在搜索框内，输入一个拼写错误的单词时，我们就拿这个单词跟词库中的单词一一进行比较，计算编辑距离，将编辑距离最小的单词，作为纠正之后的单词，提示给用户。</p><p>这就是拼写纠错最基本的原理。不过，真正用于商用的搜索引擎，拼写纠错功能显然不会就这么简单。一方面，单纯利用编辑距离来纠错，效果并不一定好；另一方面，词库中的数据量可能很大，搜索引擎每天要支持海量的搜索，所以对纠错的性能要求很高。</p></blockquote><h3 id="实现二：优化纠错效果差的情况"><a href="#实现二：优化纠错效果差的情况" class="headerlink" title="实现二：优化纠错效果差的情况"></a>实现二：优化纠错效果差的情况</h3><ul><li><p>可以离线跑批，统计用户的搜索日志，得到最常被拼错的单词数据，可以使用Spark，业务系统在遇到需要拼写纠错的时候，直接从数据库、或者缓存中查询，效果很好👍</p></li><li><p>我们并不仅仅取出编辑距离最小的那个单词，而是取出编辑距离最小的 TOP N，然后根据其他参数，决策选择哪个单词作为拼写纠错单词。比如使用搜索热门程度来决定哪个单词作为拼写纠错单词。</p></li><li><p>我们还可以用多种编辑距离计算方法，比如今天讲到的两种，然后分别编辑距离最小的 TOP N，然后求交集，用交集的结果，再继续优化处理。</p></li></ul><ul><li>我们还有更加高级一点的做法，引入个性化因素。针对每个用户，维护这个用户特有的搜索喜好，也就是常用的搜索关键词。当用户输入错误的单词的时候，我们首先在这个用户常用的搜索关键词中，计算编辑距离，查找编辑距离最小的单词。</li></ul><h3 id="实现三：优化纠错性能问题"><a href="#实现三：优化纠错性能问题" class="headerlink" title="实现三：优化纠错性能问题"></a>实现三：优化纠错性能问题</h3><blockquote><p>性能问题主要可以从 <strong>空间换时间</strong> 的角度去思考,比如增加缓存、改善算法、分而治之等</p></blockquote><ul><li>如果纠错功能的 TPS 不高，我们可以部署多台机器，每台机器运行一个独立的纠错功能。当有一个纠错请求的时候，我们通过负载均衡，分配到其中一台机器，来计算编辑距离，得到纠错单词。</li></ul><ul><li>如果纠错系统的响应时间太长，也就是，每个纠错请求处理时间过长，我们可以将纠错的词库，分割到很多台机器。当有一个纠错请求的时候，我们就将这个拼写错误的单词，同时发送到这多台机器，让多台机器并行处理，分别得到编辑距离最小的单词，然后再比对合并，最终决定出一个最优的纠错单词。</li></ul><h3 id="实现四：-换一种思考方向"><a href="#实现四：-换一种思考方向" class="headerlink" title="实现四： 换一种思考方向"></a>实现四： 换一种思考方向</h3><blockquote><p>我们可以从用户输入的字符串着手，先按照编辑距离的思想把源字符串进行变动，得到变动集合S,在和本地语料数据进行比对，本地语料加载进缓存，进行快速检索</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Stream&lt;String&gt; <span class="title">edits</span><span class="params">(<span class="keyword">final</span> String word)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 考虑删除元素的情况</span></span><br><span class="line">        Stream&lt;String&gt; deletes = IntStream.range(<span class="number">0</span>, word.length()).mapToObj((i) -&gt; word.substring(<span class="number">0</span>, i) + word.substring(i + <span class="number">1</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 考虑替换元素的情况</span></span><br><span class="line">        Stream&lt;String&gt; replaces = IntStream.range(<span class="number">0</span>, word.length()).boxed().flatMap((i) -&gt; <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>.chars().mapToObj((c) -&gt; word.substring(<span class="number">0</span>, i) + (<span class="keyword">char</span>) c + word.substring(i + <span class="number">1</span>)));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 考虑插入元素的情况</span></span><br><span class="line">        Stream&lt;String&gt; inserts = IntStream.range(<span class="number">0</span>, word.length() + <span class="number">1</span>).boxed().flatMap((i) -&gt; <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>.chars().mapToObj((c) -&gt; word.substring(<span class="number">0</span>, i) + (<span class="keyword">char</span>) c + word.substring(i)));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 相邻元素的交换情况</span></span><br><span class="line">        Stream&lt;String&gt; transposes = IntStream.range(<span class="number">0</span>, word.length() - <span class="number">1</span>).mapToObj((i) -&gt; word.substring(<span class="number">0</span>, i) + word.substring(i + <span class="number">1</span>, i + <span class="number">2</span>) + word.charAt(i) + word.substring(i + <span class="number">2</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Stream.of(deletes, replaces, inserts, transposes).flatMap((x) -&gt; x).distinct();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;如何高效实现搜索中的拼写纠错功能?&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="技术" scheme="http://blog.hetao.monster/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
